(Program -> Statement)
(Statement -> Var_Declaration)
(Var_Declaration -> Type)
Type -> Value: number
(Var_Declaration -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: 1
(Program -> Program)
(Program -> Statement)
(Statement -> Var_Declaration)
(Var_Declaration -> Type)
Type -> Value: string
(Var_Declaration -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: "string"
(Program -> Program)
(Program -> Statement)
(Statement -> Var_Declaration)
(Var_Declaration -> Type)
Type -> Value: boolean
(Var_Declaration -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: true
(Program -> Program)
(Program -> Statement)
(Statement -> If_Statement)
(If_Statement -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
Factor -> Value: b
(If_Statement -> Program)
(Program -> Statement)
(Statement -> Output_Statement)
(Output_Statement -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: "this"
(Program -> Program)
(Program -> Statement)
(Statement -> While_statement)
(While_statement -> Expression)
(Expression -> Logic_Expression)
(Logic_Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
Factor -> Value: num
(Logic_Expression -> Logical_Operator)
Logical_Operator -> Value: <
(Logic_Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: 3
(While_statement -> Program)
(Program -> Statement)
(Statement -> If_Statement)
(If_Statement -> Expression)
(Expression -> Logic_Expression)
(Logic_Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
Factor -> Value: num
(Logic_Expression -> Logical_Operator)
Logical_Operator -> Value: ==
(Logic_Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: 2
(If_Statement -> Program)
(Program -> Statement)
(Statement -> Output_Statement)
(Output_Statement -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: "if inside while"
(Program -> Program)
(Program -> Statement)
(Statement -> Input_Statement)
(Program -> Program)
(Program -> Statement)
(Statement -> Output_Statement)
(Output_Statement -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
Factor -> Value: num
(Program -> Program)
(Program -> Statement)
(Statement -> Const_Declaration)
(Const_Declaration -> Type)
Type -> Value: string
(Const_Declaration -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
(Factor -> Lit_value)
Lit_value -> Value: "hello world"
(Program -> Program)
(Program -> Statement)
(Statement -> Output_Statement)
(Output_Statement -> Expression)
(Expression -> Simple_expression)
(Simple_expression -> Term)
(Term -> Factor)
Factor -> Value: message